import os

import numpy as np
from pandas.io.parsers import read_csv
from sklearn.utils import shuffle

import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.callbacks import History 

import matplotlib.pyplot as plt


FTRAIN = '~/Documents/Facial_keypoints_detection/training.csv'
FTEST = '~/Documents/Facial_keypoints_detection/test.csv'


def load(test=False):
    fname = FTEST if test else FTRAIN
    df = read_csv(os.path.expanduser(fname))  # load pandas dataframe

    # The Image column has pixel values separated by space; convert
    # the values to numpy arrays:
    df['Image'] = df['Image'].apply(lambda im: np.fromstring(im, sep=' '))

    df = df.dropna()  # drop all rows that have missing values in them

    X = np.vstack(df['Image'].values) / 255.  # scale pixel values to [0, 1]
    X = X.astype(np.float32)

    if not test:  # only FTRAIN has any target columns
        y = df[df.columns[:-1]].values
        y = (y - 48) / 48  # scale target coordinates to [-1, 1]
        X, y = shuffle(X, y, random_state=42)  # shuffle train data
        y = y.astype(np.float32)
    else:
        y = None

    return X, y

# some settings
batch_size = 128
num_classes = 30
nepochs = 3000

X, y = load()
tr_num = X.shape[0]
X = np.expand_dims(X, axis=2)
X = np.expand_dims(X, axis=3)
X = np.reshape(X, (tr_num, 96, 96, 1))

# create model
model = Sequential()

model.add(Conv2D(32, (3, 3), padding='same', input_shape=(96, 96, 1), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.1))

model.add(Conv2D(32, (2, 2), padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))

model.add(Conv2D(32, (2, 2), padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.3))

model.add(Flatten())
model.add(Dense(500, activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(500, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))

# initiate RMSprop optimizer
learning_rate = 0.03
decay_rate = learning_rate / nepochs
opt = keras.optimizers.SGD(lr=learning_rate, momentum=0.9, decay=decay_rate, nesterov=True)

# compile model
model.compile(loss='mean_squared_error', optimizer=opt, metrics=['accuracy'])

datagen = ImageDataGenerator(
	featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

# Compute quantities required for feature-wise normalization
# (std, mean, and principal components if ZCA whitening is applied).
datagen.fit(X)

history = History()

# Fit the model on the batches generated by datagen.flow().
history = model.fit_generator(datagen.flow(X, y,
	                                   batch_size=batch_size),
	                      steps_per_epoch=X.shape[0] // batch_size,
	                      epochs=nepochs,
	                      workers=4,
			      callbacks=[history])

# fit the model
history = History()
history = model.fit(X, y, epochs=nepochs, batch_size=batch_size, validation_split=0.33, callbacks=[history])

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.grid()
plt.legend(['train', 'test'], loc='upper left')
plt.title('model loss')
plt.xlabel("epoch")
plt.ylabel("loss")
plt.show()
